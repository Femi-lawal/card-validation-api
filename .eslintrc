{
	"extends": [
		"eslint:recommended",
		"plugin:promise/recommended",
		"prettier",
		"plugin:prettier/recommended"
	],
	"rules": {
		"prettier/prettier": "warn",

		// Do not allow super() to be called twice in a constructor.
		"constructor-super": "error",

		// Disallows the (often typo) syntax if (var1 = var2). Replace with if (var2) { var1 = var2 }.
		"no-cond-assign": "error",

		// Do not allow the same case to appear more than once in a switch block.
		"no-duplicate-case": "error",

		// Empty blocks are almost never needed. Allow the one general exception: empty catch blocks.
		"no-empty": [
			"error",
			{
				"allowEmptyCatch": true
			}
		],
		"no-empty-function": "error",

		// The 'this' keyword can only be used inside of classes.
		"no-invalid-this": "error",

		// Do not allow the subtle/obscure comma operator.
		"no-sequences": "error",

		// Do not allow strings to be thrown because they will not include stack traces. Throw Errors instead.
		"no-throw-literal": "error",

		// Disallow control flow statements, such as return, continue, break, and throw in finally blocks.
		"no-unsafe-finally": "error",

		// Disallow nonsensical label usage.
		"no-unused-labels": "error",

		// Warn when variables are defined with var. Var has subtle meaning that can lead to bugs. Strongly prefer const for
		// most values and let for values that will change.
		"no-var": "warn",

		"semi": ["error", "always"],
		"comma-dangle": [
			"off",
			{
				"arrays": "always-multiline",
                "objects": "always-multiline",
                "imports": "ignore",
                "exports": "never"
			}
		],
		"object-curly-spacing": ["error", "always"],
		"no-multiple-empty-lines": [
			"error",
			{
				"max": 1,
				"maxEOF": 1
			}
		],
		"eol-last": ["error", "always"],
		"no-param-reassign": ["warn"],
		"arrow-body-style": ["error", "as-needed"],
		"arrow-parens": [
			"warn",
			"as-needed",
			{
				"requireForBlockBody": false
			}
		],
		"arrow-spacing": [
			"error",
			{
				"before": true,
				"after": true
			}
		],
		"no-const-assign": "error",
		"no-dupe-class-members": "error",
		"no-duplicate-imports": "error",
		"no-new-symbol": "error",
		"no-this-before-super": "error",
		"no-useless-computed-key": "error",
		"no-useless-constructor": "warn",
		"no-useless-rename": [
			"error",
			{
				"ignoreDestructuring": false,
				"ignoreImport": false,
				"ignoreExport": false
			}
		],
		"prefer-const": [
			"error",
			{
				"destructuring": "all",
				"ignoreReadBeforeAssign": true
			}
		],
		"prefer-template": "error",
		"require-yield": "error",
		"rest-spread-spacing": ["error", "never"],
		"template-curly-spacing": "error",
		"yield-star-spacing": ["error", "after"],
		"prefer-spread": "error",
		"symbol-description": "error",
		"max-len": [
			"error",
			{
				"code": 120
			}
		],
		"max-lines-per-function": ["off", 20],
		"sort-keys": ["error", "asc"],
		// Removed rule "disallow the use of console" from recommended eslint rules
		"no-console": "off",

		// Removed rule "disallow multiple spaces in regular expressions" from recommended eslint rules
		"no-regex-spaces": "off",

		// Removed rule "disallow the use of debugger" from recommended eslint rules
		"no-debugger": "off",

		// Removed rule "disallow mixed spaces and tabs for indentation" from recommended eslint rules
		"no-mixed-spaces-and-tabs": "off",

		// Removed rule "disallow the use of undeclared variables unless mentioned in /*global */ comments" from recommended eslint rules
		"no-undef": "error",

		// Warn against template literal placeholder syntax in regular strings
		"no-template-curly-in-string": 1,

		// Warn if return statements do not either always or never specify values
		"consistent-return": "off",

		// Warn if no return statements in callbacks of array methods
		"array-callback-return": 1,

		// Require the use of === and !==
		"eqeqeq": 2,

		// Disallow the use of alert, confirm, and prompt
		"no-alert": 2,

		// Disallow the use of arguments.caller or arguments.callee
		"no-caller": 2,

		// Disallow null comparisons without type-checking operators
		"no-eq-null": 2,

		// Disallow the use of eval()
		"no-eval": 2,

		// Warn against extending native types
		"no-extend-native": 1,

		// Warn against unnecessary calls to .bind()
		"no-extra-bind": 1,

		// Warn against unnecessary labels
		"no-extra-label": 1,

		// Disallow leading or trailing decimal points in numeric literals
		"no-floating-decimal": 2,

		// Warn against shorthand type conversions
		"no-implicit-coercion": 1,

		// Warn against function declarations and expressions inside loop statements
		"no-loop-func": 1,

		// Disallow new operators with the Function object
		"no-new-func": 2,

		// Warn against new operators with the String, Number, and Boolean objects
		"no-new-wrappers": 1,

		// Require using Error objects as Promise rejection reasons
		"prefer-promise-reject-errors": 2,

		// Enforce “for” loop update clause moving the counter in the right direction
		"for-direction": 2,

		// Enforce return statements in getters
		"getter-return": 2,

		// Disallow await inside of loops
		"no-await-in-loop": 2,

		// Disallow comparing against -0
		"no-compare-neg-zero": 2,

		// Warn against catch clause parameters from shadowing variables in the outer scope
		"no-catch-shadow": 1,

		// Disallow identifiers from shadowing restricted names
		"no-shadow-restricted-names": 2,

		// Enforce return statements in callbacks of array methods
		"callback-return": 2,

		// Require error handling in callbacks
		"handle-callback-err": 2,

		// Warn against string concatenation with __dirname and __filename
		"no-path-concat": 1,

		// Prefer using arrow functions for callbacks
		"prefer-arrow-callback": 1,

		// Return inside each then() to create readable and reusable Promise chains.
		// Forces developers to return console logs and http calls in promises.
		"promise/always-return": 1,

		//Enforces the use of catch() on un-returned promises
		"promise/catch-or-return": 1,

		// Warn against nested then() or catch() statements
		"promise/no-nesting": 1
	},
	"globals": {},
	"parserOptions": {
		"allowImportExportEverywhere": true,
		"sourceType": "module",
		"ecmaVersion": 10
	},
	"env": {
		"node": true,
		"commonjs": true,
		"es6": true
	},
	"plugins": ["prettier"],
	"overrides": [
		{
			"files": ["*.js"],
			"rules": {
				"no-empty": "off"
			}
		}
	]
}